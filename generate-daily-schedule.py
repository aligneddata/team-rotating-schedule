#
# This program generate a team schedule on daily rotating basis.
# A good portion of this program is generated by chatGPR program
# License: GNU GPLv3
# TODO: add secondary resource. And a third.

import calendar
import holidays
import csv
import sqlite3
import sys
from datetime import *
import logging

start_date = datetime.strptime( sys.argv[1], "%Y-%m-%d")
planed_vacation_filename = sys.argv[2]
day_count = 30

ca_holidays = holidays.Canada()
num_days = calendar.monthrange(2023, 3)[1]

logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', encoding='utf-8', level=logging.DEBUG)


def is_vacation(day, person, vacations):
    for vacation in vacations:
        if vacation[0] == person and vacation[1] == day.strftime('%Y-%m-%d'):
            return True
    return False

def load_vacations(planed_vacation_filename):
    vacations = []
    with open(planed_vacation_filename, 'r') as f:
        reader = csv.reader(f)
        lines = list(reader)
        logging.debug("Planned vacation file: %s" % lines)
        for one_line in lines:
            #person, start_date, end_date
            if len(one_line) <= 1:
                raise Exception("Corrupted data in vacation file %s: [%s]" % (planed_vacation_filename, one_line))

            person_name = one_line[0]
            start_date = one_line[1]

            if len(one_line) == 2:
                vacations.append([person_name, start_date])
                logging.debug("Added vacation for %s on %s" % (person_name, start_date))
                continue

            end_date = one_line[2]
            start = datetime.strptime(start_date, '%Y-%m-%d')
            end = datetime.strptime(end_date, '%Y-%m-%d')
            date_generated = [start + timedelta(days=x) for x in range(0, (end-start).days)]

            for date in date_generated:
                vacations.append([person_name, date.strftime('%Y-%m-%d')])
                logging.debug("Added vacation for %s on %s" % (person_name,  date.strftime('%Y-%m-%d')))
    return vacations


vacations = load_vacations(planed_vacation_filename)

with open('additional_holidays.txt', 'r') as f:
    additional_holidays = f.read().splitlines()
    for holiday in additional_holidays:
        ca_holidays.append(holiday)

with open('team.txt', 'r') as f:
    team = f.read().splitlines()

schedule = {}

#for single_date in (start_date + timedelta(n) for n in range(day_count)):
next_person_index = 0
for n in range(day_count):
    single_date = start_date + timedelta(n)
    if single_date.weekday() >= 5:
        logging.debug("%s: %s" % (single_date, "The date is skipped. Weekend."))
        continue
    if single_date in ca_holidays:
        logging.debug("%s: %s" % (single_date, "The date is skipped. Holiday."))
        continue

    attempt = 0
    while True:
        person = team[next_person_index % len(team)]
        next_person_index += 1
        if is_vacation(single_date, person, vacations):
            logging.debug("%s: %s" % (single_date, person + ' is on vacation and thus skipped.'))        
        else:
            schedule[single_date] = person
            logging.debug("%s: %s" % (single_date, person + ' is scheduled.'))
            break
 
        attempt += 1
        if attempt >= len(team):
            raise Exception("On %s, everybody on vacation?" % single_date)
        
conn = sqlite3.connect('schedule.db')
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS schedule (
    date INT PRIMARY KEY,
    person TEXT
)
''')

cursor.execute('''
DELETE FROM schedule 
''')

for day, person in schedule.items():
    cursor.execute("INSERT INTO schedule (date, person) VALUES (?, ?)", (day, person))

conn.commit()
conn.close()

with open("schedule.csv", "w") as f:
    writer = csv.writer(f)
    writer.writerow(["Date", "Person"])
    for day, person in schedule.items():
        writer.writerow([day, person])

print("The schedule has been printed to schedule.csv and schedule.db.")




